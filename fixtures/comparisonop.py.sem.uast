{ '@type': "Module",
   '@role': [File, Module],
   body: [
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 1,
         value: { '@type': "Compare",
            '@role': [Binary, Condition, Expression],
            'col_offset': 1,
            comparators: { '@type': "Compare.comparators",
               '@role': [Expression, Right],
               comparators: [
                  { '@type': "Num",
                     '@token': 2,
                     '@role': [Expression, Literal, Number, Primitive],
                     'col_offset': 6,
                     'end_col_offset': 6,
                     'end_lineno': 1,
                     lineno: 1,
                  },
               ],
            },
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 1,
               lineno: 1,
            },
            lineno: 1,
            ops: { '@type': "Compare.ops",
               '@role': [Expression],
               ops: [
                  { '@type': "Eq",
                     '@token': "==",
                     '@role': [Equal, Operator, Relational],
                  },
               ],
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 2,
         value: { '@type': "Compare",
            '@role': [Binary, Condition, Expression],
            'col_offset': 1,
            comparators: { '@type': "Compare.comparators",
               '@role': [Expression, Right],
               comparators: [
                  { '@type': "Num",
                     '@token': 2,
                     '@role': [Expression, Literal, Number, Primitive],
                     'col_offset': 6,
                     'end_col_offset': 6,
                     'end_lineno': 2,
                     lineno: 2,
                  },
               ],
            },
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 2,
               lineno: 2,
            },
            lineno: 2,
            ops: { '@type': "Compare.ops",
               '@role': [Expression],
               ops: [
                  { '@type': "NotEq",
                     '@token': "!=",
                     '@role': [Equal, Not, Operator, Relational],
                  },
               ],
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 3,
         value: { '@type': "UnaryOp",
            '@role': [Boolean, Expression, Operator, Unary],
            'col_offset': 1,
            lineno: 3,
            op: { '@type': "Not",
               '@token': "not",
               '@role': [Boolean, Not, Operator],
            },
            operand: { '@type': "Num",
               '@token': 1,
               '@role': [Expression, Literal, Number, Primitive],
               'col_offset': 5,
               'end_col_offset': 5,
               'end_lineno': 3,
               lineno: 3,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 4,
         value: { '@type': "Compare",
            '@role': [Binary, Condition, Expression],
            'col_offset': 1,
            comparators: { '@type': "Compare.comparators",
               '@role': [Expression, Right],
               comparators: [
                  { '@type': "Num",
                     '@token': 2,
                     '@role': [Expression, Literal, Number, Primitive],
                     'col_offset': 6,
                     'end_col_offset': 6,
                     'end_lineno': 4,
                     lineno: 4,
                  },
                  { '@type': "Num",
                     '@token': 3,
                     '@role': [Expression, Literal, Number, Primitive],
                     'col_offset': 11,
                     'end_col_offset': 11,
                     'end_lineno': 4,
                     lineno: 4,
                  },
               ],
            },
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 4,
               lineno: 4,
            },
            lineno: 4,
            ops: { '@type': "Compare.ops",
               '@role': [Expression],
               ops: [
                  { '@type': "Eq",
                     '@token': "==",
                     '@role': [Equal, Operator, Relational],
                  },
                  { '@type': "Eq",
                     '@token': "==",
                     '@role': [Equal, Operator, Relational],
                  },
               ],
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 5,
         value: { '@type': "Compare",
            '@role': [Binary, Condition, Expression],
            'col_offset': 1,
            comparators: { '@type': "Compare.comparators",
               '@role': [Expression, Right],
               comparators: [
                  { '@type': "Num",
                     '@token': 2,
                     '@role': [Expression, Literal, Number, Primitive],
                     'col_offset': 5,
                     'end_col_offset': 5,
                     'end_lineno': 5,
                     lineno: 5,
                  },
                  { '@type': "Num",
                     '@token': 3,
                     '@role': [Expression, Literal, Number, Primitive],
                     'col_offset': 9,
                     'end_col_offset': 9,
                     'end_lineno': 5,
                     lineno: 5,
                  },
               ],
            },
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 5,
               lineno: 5,
            },
            lineno: 5,
            ops: { '@type': "Compare.ops",
               '@role': [Expression],
               ops: [
                  { '@type': "Lt",
                     '@token': "<",
                     '@role': [LessThan, Operator, Relational],
                  },
                  { '@type': "Gt",
                     '@token': ">",
                     '@role': [GreaterThan, Operator, Relational],
                  },
               ],
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 6,
         value: { '@type': "Compare",
            '@role': [Binary, Condition, Expression],
            'col_offset': 1,
            comparators: { '@type': "Compare.comparators",
               '@role': [Expression, Right],
               comparators: [
                  { '@type': "Num",
                     '@token': 2,
                     '@role': [Expression, Literal, Number, Primitive],
                     'col_offset': 5,
                     'end_col_offset': 5,
                     'end_lineno': 6,
                     lineno: 6,
                  },
                  { '@type': "Num",
                     '@token': 3,
                     '@role': [Expression, Literal, Number, Primitive],
                     'col_offset': 10,
                     'end_col_offset': 10,
                     'end_lineno': 6,
                     lineno: 6,
                  },
               ],
            },
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 6,
               lineno: 6,
            },
            lineno: 6,
            ops: { '@type': "Compare.ops",
               '@role': [Expression],
               ops: [
                  { '@type': "Lt",
                     '@token': "<",
                     '@role': [LessThan, Operator, Relational],
                  },
                  { '@type': "NotEq",
                     '@token': "!=",
                     '@role': [Equal, Not, Operator, Relational],
                  },
               ],
            },
         },
      },
   ],
}