{ '@type': "Module",
   '@role': [File, Module],
   body: [
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 1,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 1,
               lineno: 1,
            },
            lineno: 1,
            op: { '@type': "BitAnd",
               '@token': "&",
               '@role': [And, Binary, Bitwise, Operator],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 5,
               'end_col_offset': 5,
               'end_lineno': 1,
               lineno: 1,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 2,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 2,
               lineno: 2,
            },
            lineno: 2,
            op: { '@type': "BitOr",
               '@token': "|",
               '@role': [Binary, Bitwise, Operator, Or],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 5,
               'end_col_offset': 5,
               'end_lineno': 2,
               lineno: 2,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 3,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 3,
               lineno: 3,
            },
            lineno: 3,
            op: { '@type': "BitXor",
               '@token': "^",
               '@role': [Binary, Bitwise, Operator, Xor],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 5,
               'end_col_offset': 5,
               'end_lineno': 3,
               lineno: 3,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 4,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 4,
               lineno: 4,
            },
            lineno: 4,
            op: { '@type': "LShift",
               '@token': "<<",
               '@role': [Binary, Bitwise, LeftShift, Operator],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 6,
               'end_col_offset': 6,
               'end_lineno': 4,
               lineno: 4,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 5,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 5,
               lineno: 5,
            },
            lineno: 5,
            op: { '@type': "RShift",
               '@token': ">>",
               '@role': [Binary, Bitwise, Operator, RightShift],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 6,
               'end_col_offset': 6,
               'end_lineno': 5,
               lineno: 5,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 6,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "BinOp",
               '@role': [Binary, Expression, Left],
               'col_offset': 7,
               left: { '@type': "BinOp",
                  '@role': [Binary, Expression, Left],
                  'col_offset': 1,
                  left: { '@type': "Num",
                     '@token': 1,
                     '@role': [Binary, Expression, Left, Literal, Number, Primitive],
                     'col_offset': 1,
                     'end_col_offset': 1,
                     'end_lineno': 6,
                     lineno: 6,
                  },
                  lineno: 6,
                  op: { '@type': "BitAnd",
                     '@token': "&",
                     '@role': [And, Binary, Bitwise, Operator],
                  },
                  right: { '@type': "Num",
                     '@token': 2,
                     '@role': [Binary, Expression, Literal, Number, Primitive, Right],
                     'col_offset': 5,
                     'end_col_offset': 5,
                     'end_lineno': 6,
                     lineno: 6,
                  },
               },
               lineno: 6,
               op: { '@type': "BitAnd",
                  '@token': "&",
                  '@role': [And, Binary, Bitwise, Operator],
               },
               right: { '@type': "Num",
                  '@token': 3,
                  '@role': [Binary, Expression, Literal, Number, Primitive, Right],
                  'col_offset': 9,
                  'end_col_offset': 9,
                  'end_lineno': 6,
                  lineno: 6,
               },
            },
            lineno: 6,
            op: { '@type': "BitOr",
               '@token': "|",
               '@role': [Binary, Bitwise, Operator, Or],
            },
            right: { '@type': "Num",
               '@token': 4,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 13,
               'end_col_offset': 13,
               'end_lineno': 6,
               lineno: 6,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 7,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "BinOp",
               '@role': [Binary, Expression, Left],
               'col_offset': 2,
               left: { '@type': "Name",
                  '@token': "a",
                  '@role': [Binary, Expression, Identifier, Left],
                  'col_offset': 2,
                  ctx: "Load",
                  'end_col_offset': 2,
                  'end_lineno': 7,
                  lineno: 7,
               },
               lineno: 7,
               op: { '@type': "Add",
                  '@token': "+",
                  '@role': [Add, Arithmetic, Binary, Operator],
               },
               right: { '@type': "Num",
                  '@token': 1,
                  '@role': [Binary, Expression, Literal, Number, Primitive, Right],
                  'col_offset': 6,
                  'end_col_offset': 6,
                  'end_lineno': 7,
                  lineno: 7,
               },
            },
            lineno: 7,
            op: { '@type': "BitOr",
               '@token': "|",
               '@role': [Binary, Bitwise, Operator, Or],
            },
            right: { '@type': "BinOp",
               '@role': [Binary, Expression, Right],
               'col_offset': 12,
               left: { '@type': "Name",
                  '@token': "d",
                  '@role': [Binary, Expression, Identifier, Left],
                  'col_offset': 12,
                  ctx: "Load",
                  'end_col_offset': 12,
                  'end_lineno': 7,
                  lineno: 7,
               },
               lineno: 7,
               op: { '@type': "Add",
                  '@token': "+",
                  '@role': [Add, Arithmetic, Binary, Operator],
               },
               right: { '@type': "Num",
                  '@token': 2,
                  '@role': [Binary, Expression, Literal, Number, Primitive, Right],
                  'col_offset': 16,
                  'end_col_offset': 16,
                  'end_lineno': 7,
                  lineno: 7,
               },
            },
         },
      },
   ],
}