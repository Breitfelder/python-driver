{ '@type': "Module",
   '@role': [File, Module],
   body: [
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 1,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 1,
               lineno: 1,
            },
            lineno: 1,
            op: { '@type': "Add",
               '@token': "+",
               '@role': [Add, Arithmetic, Binary, Operator],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 3,
               'end_col_offset': 3,
               'end_lineno': 1,
               lineno: 1,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 2,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 2,
               lineno: 2,
            },
            lineno: 2,
            op: { '@type': "Sub",
               '@token': "-",
               '@role': [Arithmetic, Binary, Operator, Substract],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 3,
               'end_col_offset': 3,
               'end_lineno': 2,
               lineno: 2,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 3,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 3,
               lineno: 3,
            },
            lineno: 3,
            op: { '@type': "Mult",
               '@token': "*",
               '@role': [Arithmetic, Binary, Multiply, Operator],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 3,
               'end_col_offset': 3,
               'end_lineno': 3,
               lineno: 3,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 4,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 4,
               lineno: 4,
            },
            lineno: 4,
            op: { '@type': "Div",
               '@token': "/",
               '@role': [Arithmetic, Binary, Divide, Operator],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 3,
               'end_col_offset': 3,
               'end_lineno': 4,
               lineno: 4,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 5,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 5,
               lineno: 5,
            },
            lineno: 5,
            op: { '@type': "FloorDiv",
               '@token': "//",
               '@role': [Arithmetic, Binary, Divide, Incomplete, Operator],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 4,
               'end_col_offset': 4,
               'end_lineno': 5,
               lineno: 5,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 6,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 6,
               lineno: 6,
            },
            lineno: 6,
            op: { '@type': "Mod",
               '@token': "%",
               '@role': [Arithmetic, Binary, Module, Operator],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 3,
               'end_col_offset': 3,
               'end_lineno': 6,
               lineno: 6,
            },
         },
      },
      { '@type': "Expr",
         '@role': [Expression],
         'col_offset': 1,
         lineno: 7,
         value: { '@type': "BinOp",
            '@role': [Binary, Expression],
            'col_offset': 1,
            left: { '@type': "Num",
               '@token': 1,
               '@role': [Binary, Expression, Left, Literal, Number, Primitive],
               'col_offset': 1,
               'end_col_offset': 1,
               'end_lineno': 7,
               lineno: 7,
            },
            lineno: 7,
            op: { '@type': "Pow",
               '@token': "**",
               '@role': [Arithmetic, Binary, Incomplete, Operator],
            },
            right: { '@type': "Num",
               '@token': 2,
               '@role': [Binary, Expression, Literal, Number, Primitive, Right],
               'col_offset': 4,
               'end_col_offset': 4,
               'end_lineno': 7,
               lineno: 7,
            },
         },
      },
   ],
   'noops_remainder': { '@type': "RemainderNoops",
      '@role': [Noop],
      'col_offset': 1,
      'end_col_offset': 1,
      'end_lineno': 8,
      lineno: 8,
      lines: [
         { '@type': "NoopLine",
            '@token': " 1@2 FIXME: matmul\n",
            '@role': [Comment, Noop],
            'col_offset': 1,
            lineno: 8,
         },
      ],
   },
}