{ '@type': "Module",
   '@role': [File, Module],
   body: [
      { '@type': "FunctionDef",
         '@token': "foo",
         '@role': [Declaration, Function, Identifier, Name],
         args: { '@type': "arguments",
            '@role': [Argument, Declaration, Function, Incomplete],
            args: [],
            defaults: [],
            'kw_defaults': [],
            kwarg: ~,
            kwonlyargs: [],
            vararg: ~,
         },
         body: { '@type': "FunctionDef.body",
            '@role': [Body, Declaration, Function],
            'body_stmts': [
               { '@type': "Assign",
                  '@role': [Assignment, Binary, Expression],
                  'col_offset': 5,
                  lineno: 2,
                  targets: [
                     { '@type': "Name",
                        '@token': "a",
                        '@role': [Expression, Identifier, Left],
                        'col_offset': 5,
                        ctx: "Store",
                        'end_col_offset': 5,
                        'end_lineno': 2,
                        lineno: 2,
                     },
                  ],
                  value: { '@type': "Dict",
                     '@role': [Expression, Literal, Map, Primitive, Right],
                     'col_offset': 9,
                     keys: [
                        { '@type': "Str",
                           '@token': "1",
                           '@role': [Expression, Key, Literal, Map, Primitive, String],
                           'col_offset': 10,
                           'end_col_offset': 12,
                           'end_lineno': 2,
                           lineno: 2,
                        },
                     ],
                     lineno: 2,
                     values: [
                        { '@type': "Num",
                           '@token': 1,
                           '@role': [Expression, Literal, Map, Number, Primitive, Value],
                           'col_offset': 15,
                           'end_col_offset': 15,
                           'end_lineno': 2,
                           lineno: 2,
                        },
                     ],
                  },
               },
               { '@type': "Assign",
                  '@role': [Assignment, Binary, Expression],
                  'col_offset': 5,
                  lineno: 3,
                  targets: [
                     { '@type': "Name",
                        '@token': "b",
                        '@role': [Expression, Identifier, Left],
                        'col_offset': 5,
                        ctx: "Store",
                        'end_col_offset': 5,
                        'end_lineno': 3,
                        lineno: 3,
                     },
                  ],
                  value: { '@type': "Dict",
                     '@role': [Expression, Literal, Map, Primitive, Right],
                     'col_offset': 9,
                     keys: [
                        { '@type': "Str",
                           '@token': "2",
                           '@role': [Expression, Key, Literal, Map, Primitive, String],
                           'col_offset': 10,
                           'end_col_offset': 12,
                           'end_lineno': 3,
                           lineno: 3,
                        },
                     ],
                     lineno: 3,
                     values: [
                        { '@type': "Num",
                           '@token': 2,
                           '@role': [Expression, Literal, Map, Number, Primitive, Value],
                           'col_offset': 15,
                           'end_col_offset': 15,
                           'end_lineno': 3,
                           lineno: 3,
                        },
                     ],
                  },
               },
               { '@type': "Return",
                  '@token': "return",
                  '@role': [Return, Statement],
                  'col_offset': 5,
                  'end_col_offset': 10,
                  'end_lineno': 4,
                  lineno: 4,
                  value: { '@type': "Dict",
                     '@role': [Expression, Literal, Map, Primitive],
                     'col_offset': 12,
                     keys: [
                        { '@type': "NoneLiteral",
                           '@token': "None",
                           '@role': [Expression, Key, Literal, Map, 'Null', Primitive],
                           LiteralValue: "None",
                        },
                        { '@type': "NoneLiteral",
                           '@token': "None",
                           '@role': [Expression, Key, Literal, Map, 'Null', Primitive],
                           LiteralValue: "None",
                        },
                     ],
                     lineno: 4,
                     values: [
                        { '@type': "Name",
                           '@token': "a",
                           '@role': [Expression, Identifier, Map, Value],
                           'col_offset': 15,
                           ctx: "Load",
                           'end_col_offset': 15,
                           'end_lineno': 4,
                           lineno: 4,
                        },
                        { '@type': "Name",
                           '@token': "b",
                           '@role': [Expression, Identifier, Map, Value],
                           'col_offset': 20,
                           ctx: "Load",
                           'end_col_offset': 20,
                           'end_lineno': 4,
                           lineno: 4,
                        },
                     ],
                  },
               },
            ],
         },
         'col_offset': 5,
         'decorator_list': { '@type': "FunctionDef.decorators",
            '@role': [Declaration, Function, Incomplete],
            decorators: [],
         },
         'end_col_offset': 7,
         'end_lineno': 1,
         lineno: 1,
         returns: ~,
      },
   ],
}