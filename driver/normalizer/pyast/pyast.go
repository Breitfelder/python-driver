// Package pyast defines constants from Python 2 and 3 AST.
package pyast

import "gopkg.in/bblfsh/sdk.v1/uast/ann"

// Python 2+3 AST node types.
// This includes all classes extending from _ast.AST for both Python 2 and 3.
// See:
// https://docs.python.org/3.6/library/ast.html#abstract-grammar
// https://docs.python.org/2.7/library/ast.html#abstract-grammar

var (
	Add                   = ann.HasInternalType("Add")
	Alias                 = ann.HasInternalType("alias")
	AliasAsName           = ann.HasInternalType("alias.asname")
	And                   = ann.HasInternalType("And")
	AnnAssign             = ann.HasInternalType("AnnAssign")
	Annotation            = ann.HasInternalType("Annotation")
	Arg                   = ann.HasInternalType("arg")
	ArgumentDefaults      = ann.HasInternalType("arguments.defaults")
	Arguments             = ann.HasInternalType("arguments")
	Assert                = ann.HasInternalType("Assert")
	Assign                = ann.HasInternalType("Assign")
	AsyncFor              = ann.HasInternalType("AsyncFor")
	AsyncForBody          = ann.HasInternalType("AsyncFor.body")
	AsyncForElse          = ann.HasInternalType("AsyncFor.orelse")
	AsyncFuncDecorators   = ann.HasInternalType("AsyncFunctionDef.decorator_list")
	AsyncFuncDefBody      = ann.HasInternalType("AsyncFunctionDef.body")
	AsyncFunctionDef      = ann.HasInternalType("AsyncFunctionDef")
	AsyncWith             = ann.HasInternalType("AsyncWith")
	Attribute             = ann.HasInternalType("Attribute")
	AugAssign             = ann.HasInternalType("AugAssign")
	AugLoad               = ann.HasInternalType("AugLoad")
	AugStore              = ann.HasInternalType("AugStore")
	Await                 = ann.HasInternalType("Await")
	BinOp                 = ann.HasInternalType("BinOp")
	BitAnd                = ann.HasInternalType("BitAnd")
	BitOr                 = ann.HasInternalType("BitOr")
	BitXor                = ann.HasInternalType("BitXor")
	BoolLiteral           = ann.HasInternalType("BoolLiteral")
	BoolOp                = ann.HasInternalType("BoolOp")
	BoolopInternal        = ann.HasInternalType("boolop")
	Break                 = ann.HasInternalType("Break")
	ByteLiteral           = ann.HasInternalType("ByteLiteral")
	Bytes                 = ann.HasInternalType("Bytes")
	Call                  = ann.HasInternalType("Call")
	ClassDef              = ann.HasInternalType("ClassDef")
	ClassDefDecorators    = ann.HasInternalType("ClassDef.decorator_list")
	ClassDefBases         = ann.HasInternalType("ClassDef.bases")
	ClassDefBody          = ann.HasInternalType("ClassDef.body")
	ClassDefKeywords      = ann.HasInternalType("ClassDef.keywords")
	Cmpop                 = ann.HasInternalType("cmpop")
	Compare               = ann.HasInternalType("Compare")
	CompareComparators    = ann.HasInternalType("Compare.comparators")
	CompareOps            = ann.HasInternalType("Compare.ops")
	Comprehension         = ann.HasInternalType("comprehension")
	Constant              = ann.HasInternalType("Constant")
	Continue              = ann.HasInternalType("Continue")
	Del                   = ann.HasInternalType("Del")
	Delete                = ann.HasInternalType("Delete")
	Dict                  = ann.HasInternalType("Dict")
	DictComp              = ann.HasInternalType("DictComp")
	Div                   = ann.HasInternalType("Div")
	Ellipsis              = ann.HasInternalType("Ellipsis")
	Eq                    = ann.HasInternalType("Eq")
	ExceptHandler         = ann.HasInternalType("ExceptHandler")
	ExceptHandlerName     = ann.HasInternalType("ExceptHandler.name")
	ExcepthandlerInternal = ann.HasInternalType("excepthandler")
	Exec                  = ann.HasInternalType("Exec")
	Expr                  = ann.HasInternalType("Expr")
	ExprInternal          = ann.HasInternalType("expr")
	ExprContext           = ann.HasInternalType("expr_context")
	Expression            = ann.HasInternalType("Expression")
	ExtSlice              = ann.HasInternalType("ExtSlice")
	FloorDiv              = ann.HasInternalType("FloorDiv")
	For                   = ann.HasInternalType("For")
	ForBody               = ann.HasInternalType("For.body")
	ForElse               = ann.HasInternalType("For.orelse")
	FormattedValue        = ann.HasInternalType("FormattedValue")
	FuncDecorators        = ann.HasInternalType("FunctionDef.decorator_list")
	FuncDefBody           = ann.HasInternalType("FunctionDef.body")
	FunctionDef           = ann.HasInternalType("FunctionDef")
	GeneratorExp          = ann.HasInternalType("GeneratorExp")
	Global                = ann.HasInternalType("Global")
	Gt                    = ann.HasInternalType("Gt")
	GtE                   = ann.HasInternalType("GtE")
	If                    = ann.HasInternalType("If")
	IfBody                = ann.HasInternalType("If.body")
	IfElse                = ann.HasInternalType("If.orelse")
	IfExp                 = ann.HasInternalType("IfExp")
	Import                = ann.HasInternalType("Import")
	ImportFrom            = ann.HasInternalType("ImportFrom")
	ImportFromModule      = ann.HasInternalType("ImportFrom.module")
	In                    = ann.HasInternalType("In")
	Index                 = ann.HasInternalType("Index")
	Interactive           = ann.HasInternalType("Interactive")
	Invert                = ann.HasInternalType("Invert")
	Is                    = ann.HasInternalType("Is")
	IsNot                 = ann.HasInternalType("IsNot")
	JoinedStr             = ann.HasInternalType("JoinedStr")
	Keyword               = ann.HasInternalType("keyword")
	LShift                = ann.HasInternalType("LShift")
	Lambda                = ann.HasInternalType("Lambda")
	LambdaBody            = ann.HasInternalType("Lambda.body")
	List                  = ann.HasInternalType("List")
	ListComp              = ann.HasInternalType("ListComp")
	Load                  = ann.HasInternalType("Load")
	Lt                    = ann.HasInternalType("Lt")
	LtE                   = ann.HasInternalType("LtE")
	MatMult               = ann.HasInternalType("MatMult")
	Mod                   = ann.HasInternalType("Mod")
	ModInternal           = ann.HasInternalType("mod")
	Module                = ann.HasInternalType("Module")
	Mult                  = ann.HasInternalType("Mult")
	Name                  = ann.HasInternalType("Name")
	NameConstant          = ann.HasInternalType("NameConstant")
	NoneLiteral           = ann.HasInternalType("NoneLiteral")
	Nonlocal              = ann.HasInternalType("Nonlocal")
	NoopLine              = ann.HasInternalType("NoopLine")
	Noop_lineInternal     = ann.HasInternalType("noop_line")
	Not                   = ann.HasInternalType("Not")
	NotEq                 = ann.HasInternalType("NotEq")
	NotIn                 = ann.HasInternalType("NotIn")
	Num                   = ann.HasInternalType("Num")
	Operator              = ann.HasInternalType("operator")
	Or                    = ann.HasInternalType("Or")
	Param                 = ann.HasInternalType("Param")
	Pass                  = ann.HasInternalType("Pass")
	Pow                   = ann.HasInternalType("Pow")
	PreviousNoops         = ann.HasInternalType("PreviousNoops")
	Print                 = ann.HasInternalType("Print")
	RShift                = ann.HasInternalType("RShift")
	Raise                 = ann.HasInternalType("Raise")
	RemainderNoops        = ann.HasInternalType("RemainderNoops")
	Repr                  = ann.HasInternalType("Repr")
	Return                = ann.HasInternalType("Return")
	Returns               = ann.HasInternalType("returns")
	SameLineNoops         = ann.HasInternalType("SameLineNoops")
	Set                   = ann.HasInternalType("Set")
	SetComp               = ann.HasInternalType("SetComp")
	Slice                 = ann.HasInternalType("Slice")
	SliceInternal         = ann.HasInternalType("slice")
	StringLiteral         = ann.HasInternalType("StringLiteral")
	Starred               = ann.HasInternalType("Starred")
	Stmt                  = ann.HasInternalType("stmt")
	Store                 = ann.HasInternalType("Store")
	Str                   = ann.HasInternalType("Str")
	Sub                   = ann.HasInternalType("Sub")
	Subscript             = ann.HasInternalType("Subscript")
	Suite                 = ann.HasInternalType("Suite")
	Try                   = ann.HasInternalType("Try")
	TryBody               = ann.HasInternalType("Try.body")
	TryElse               = ann.HasInternalType("Try.orelse")
	TryExcept             = ann.HasInternalType("TryExcept")
	TryFinalBody          = ann.HasInternalType("Try.finalbody")
	TryFinally            = ann.HasInternalType("TryFinally")
	TryHandlers           = ann.HasInternalType("Try.handlers")
	Tuple                 = ann.HasInternalType("Tuple")
	UAdd                  = ann.HasInternalType("UAdd")
	USub                  = ann.HasInternalType("USub")
	UnaryOp               = ann.HasInternalType("UnaryOp")
	UnaryopInternal       = ann.HasInternalType("unaryop")
	While                 = ann.HasInternalType("While")
	WhileBody             = ann.HasInternalType("While.body")
	WhileElse             = ann.HasInternalType("While.orelse")
	With                  = ann.HasInternalType("With")
	WithBody              = ann.HasInternalType("With.body")
	WithItems             = ann.HasInternalType("With.items")
	Withitem              = ann.HasInternalType("withitem")
	Yield                 = ann.HasInternalType("Yield")
	YieldFrom             = ann.HasInternalType("YieldFrom")
)
